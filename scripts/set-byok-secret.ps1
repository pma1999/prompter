Param(
  [switch]$NoPreview
)

function New-UrlBase64Secret([int]$bytes = 48) {
  $buf = New-Object 'System.Byte[]' $bytes
  [System.Security.Cryptography.RandomNumberGenerator]::Fill($buf)
  $b64 = [Convert]::ToBase64String($buf)
  # URL-safe base64 without padding
  return $b64.TrimEnd('=').Replace('+','-').Replace('/','_')
}

$ErrorActionPreference = 'Stop'

if (-not (Get-Command npx -ErrorAction SilentlyContinue)) {
  Write-Error "npx not found. Install Node.js first."
}

$secretCurrent = New-UrlBase64Secret 48
$secretPrevious = New-UrlBase64Secret 48
Write-Host "Generated BYOK_SECRET_CURRENT (len: $($secretCurrent.Length)) and BYOK_SECRET_PREVIOUS_1 (len: $($secretPrevious.Length))."

# Ensure we're in the project root containing package.json
if (-not (Test-Path -Path "package.json")) {
  Write-Error "Run this script from the project root (where package.json is located)."
}

# Ensure project is linked to Vercel (non-interactive if VERCEL_TOKEN is set)
if (-not (Test-Path ".vercel/project.json")) {
  Write-Host "Linking project to Vercel (requires prior 'vercel login' or VERCEL_TOKEN)."
  npx vercel link --yes | cat
}

# Set production secrets (CURRENT and PREVIOUS_1)
$secretCurrent | npx vercel env add BYOK_SECRET_CURRENT production | cat
if ($LASTEXITCODE -ne 0) { throw "Failed to set BYOK_SECRET_CURRENT for production." }
$secretPrevious | npx vercel env add BYOK_SECRET_PREVIOUS_1 production | cat
if ($LASTEXITCODE -ne 0) { throw "Failed to set BYOK_SECRET_PREVIOUS_1 for production." }

if (-not $NoPreview) {
  $secretCurrent | npx vercel env add BYOK_SECRET_CURRENT preview | cat
  if ($LASTEXITCODE -ne 0) { throw "Failed to set BYOK_SECRET_CURRENT for preview." }
  $secretPrevious | npx vercel env add BYOK_SECRET_PREVIOUS_1 preview | cat
  if ($LASTEXITCODE -ne 0) { throw "Failed to set BYOK_SECRET_PREVIOUS_1 for preview." }
}

# Also set for local development
$envPath = ".env.local"
$lineCurrent = "BYOK_SECRET_CURRENT=$secretCurrent"
$linePrevious = "BYOK_SECRET_PREVIOUS_1=$secretPrevious"
if (Test-Path $envPath) {
  $content = Get-Content $envPath -Raw
  if ($content -match "(?m)^BYOK_SECRET_CURRENT=") {
    $content = [System.Text.RegularExpressions.Regex]::Replace($content, "(?m)^BYOK_SECRET_CURRENT=.*$", $lineCurrent)
  } else { $content = $content + "`n" + $lineCurrent }
  if ($content -match "(?m)^BYOK_SECRET_PREVIOUS_1=") {
    $content = [System.Text.RegularExpressions.Regex]::Replace($content, "(?m)^BYOK_SECRET_PREVIOUS_1=.*$", $linePrevious)
  } else { $content = $content + "`n" + $linePrevious }
  Set-Content -Path $envPath -Value $content
} else {
  Set-Content -Path $envPath -Value ($lineCurrent + "`n" + $linePrevious)
}
Write-Host ".env.local updated."

Write-Host "Done."


