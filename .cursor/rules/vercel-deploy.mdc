---
description: Vercel deployment hardening – Node.js runtime, preferredRegion, dynamic API routes, and security headers
globs: prompter/src/app/api/**/route.ts,prompter/next.config.ts
---
# Vercel Deployment – Runtime, Region, Dynamic API, and Headers

## Overview
This project runs all API routes on the Node.js runtime, forces dynamic evaluation for `/api/*`, and sets security/no-store headers via `next.config.ts`. The goal is predictable execution for `@google/genai`, correct BYOK behavior, and no accidental caching of API responses.

## API Routes Settings
- Export the following at the top of each API `route.ts`:
  - `export const runtime = "nodejs"` – ensures Node.js runtime (not Edge) for SDK compatibility and access to the in-memory key store.
  - `export const preferredRegion = "home"` – encourages single-region execution; use a single production region for consistency of the in-memory BYOK store.
  - `export const dynamic = "force-dynamic"` – avoids static/cached responses for API endpoints.
  - For long-running calls like refine: `export const maxDuration = 60`.

## Headers via next.config.ts
- `next.config.ts` defines `headers()` for `/api/:path*` adding:
  - `Cache-Control: no-store, no-cache, must-revalidate` – ensures no caching for API responses.
  - `X-Content-Type-Options: nosniff` – basic MIME sniffing protection.
  - `Referrer-Policy: no-referrer` – minimize referrer leakage.
  - `Strict-Transport-Security: max-age=63072000; includeSubDomains; preload` – HSTS (effective on HTTPS in production).

## BYOK Scaling Note
- The default BYOK key store is in-memory per process. For multi-region or horizontally scaled deployments, replace the store with a shared KV/Redis implementation. When single-region (preferred), the in-memory store remains coherent across requests.

## Files
- API routes: [prompter/src/app/api/**/route.ts](mdc:prompter/src/app/api/)
- Config headers: [prompter/next.config.ts](mdc:prompter/next.config.ts)

