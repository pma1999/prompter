---
description: Gemini context caching (implicit + explicit), contract, env flags, and lifecycle
---
# Caching – Implicit and Explicit (Gemini 2.5 Flash Lite)

## Overview
This project implements both implicit and explicit context caching for the refine flow.

- Explicit caching is per-conversation and guarantees savings by caching the stable prefix (persona+rules+raw+images).
- Implicit caching requires no code and may reduce costs when large stable prefixes are reused.

## Key files
- Server: [refineService.ts](mdc:prompter/src/lib/server/refineService.ts), [cacheService.ts](mdc:prompter/src/lib/server/cacheService.ts)
- API: [route.ts](mdc:prompter/src/app/api/refine/route.ts)
- Client: [Workspace.tsx](mdc:prompter/src/components/workspace/Workspace.tsx), [refine.ts](mdc:prompter/src/lib/api/refine.ts)
- Types: [types.ts](mdc:prompter/src/domain/types.ts)

## Server behavior
- Default mode is derived from env (see below). Client may request `cache.mode`.
- When using explicit cache:
  - Build cached prefix via `buildCachedPrefix(...)`; include images there.
  - Create or reuse a cache: `ensureCache(...)` with `systemInstruction` and cached `contents`.
  - On GenerateContent calls, send only dynamic suffix contents and set `config.cachedContent`. Do not send `systemInstruction`.
  - Extend TTL on `needs_clarification`; optionally delete on `ready`.
  - Key protection: if client-provided `cache.key` ≠ computed key, ignore the provided cache and create a fresh one.
  - BYOK: las cachés son específicas por clave y modelo; al cambiar/desconectar la clave, el cliente debe limpiar `cachedContentName`/`key` locales (ya implementado en `Workspace.tsx`).
- When not using explicit cache: send full contents (images first + full directive) and `systemInstruction`.
- Logs: `[refine][cache] create|update_ttl|delete|key_mismatch_discard|ensure_error`; `[refine][service] *.usage` if available.

## Token usage & counting
- Post-respuesta: `usageMetadata` indica cuánto del prompt vino de caché (`cachedContentTokenCount`) y cuánto fue procesado como entrada dinámica.
- Preflight: el endpoint `POST /api/tokens/count` usa `models.countTokens` con:
  - Modo explícito con caché existente: cuenta solo el sufijo dinámico (lo que se enviará en la próxima llamada).
  - Modo explícito sin caché: cuenta prefijo (a cachear) y sufijo por separado y los devuelve.
  - Modo implícito: cuenta el contenido completo (imágenes + directiva).

## Client behavior
- Persist `cachedContentName` and `key` across a conversation and include them in subsequent `RefineRequest.cache`.
- Reset (new session, model change, manual reset) clears local `cacheName`/`cacheKey`.
 - BYOK: en `api-key-connected`/`api-key-disconnected` se limpian `cacheName`/`cacheKey` para evitar reuso cruzado.

## API Contract additions
- Request `cache?`: `{ mode?: "off"|"implicit_only"|"explicit_per_request"|"explicit_per_conversation", cachedContentName?: string, key?: string, ttlSeconds?: number, forceRefresh?: boolean }`
- Response `cache?`:
  - Explicit: `{ mode: "explicit", cachedContentName?: string, key?: string, expireTime?: string, created?: boolean }`
  - Implicit: `{ mode: "implicit_only", usage?: { cachedTokens?: number, totalTokenCount?: number } }`

## Env flags
- `REFINER_EXPLICIT_CACHE_ENABLED` (default: false)
- `REFINER_CACHE_MODE` (default: `explicit_per_conversation` if explicit enabled; else `implicit_only`)
- `REFINER_CACHE_DEFAULT_TTL_SECONDS` (default: 900)
- `REFINER_CACHE_AUTO_DELETE_ON_READY` (default: false)
- `REFINER_THINKING_BUDGET` (default: 24576)

## Constraints (Gemini)
- When `config.cachedContent` is provided, `systemInstruction`, `tools`, and `toolConfig` MUST NOT be included in the same GenerateContent call.
- Cached content is model-bound; use the same model for cache creation and usage.